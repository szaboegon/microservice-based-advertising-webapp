version: '3.4'

networks:
  mynetwork:

services:
  traefik:
    container_name: traefik
    # The official v2 Traefik docker image
    image: traefik:v2.9
    networks:      
       - mynetwork
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      - "--log.level=DEBUG"
      - "--api.insecure=true"   
      - "--providers.docker"
    #  - "--serversTransport.insecureSkipVerify=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    #  - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
     # - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    #  - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    #  - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
    #  - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
    #  - "--certificatesresolvers.myresolver.acme.email=szabo.egon2001@gmail.com"
    #  - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      # The HTTP port
      - "80:80"
      # The HTTPS port
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - "./letsencrypt:/letsencrypt"
      - /var/run/docker.sock:/var/run/docker.sock
      

  advertisingservice.webapi:
    container_name: advertising_service
    image: ${DOCKER_REGISTRY-}adsvertisingservicewebapi
    build:
      context: .
      dockerfile: AdvertisingService.WebAPI/Dockerfile
    networks:
       - mynetwork
    environment:
       - DB_HOST=advertisingdb
       - DB_NAME=advertising
       - DB_SA_PASSWORD=password@12345
    expose:
       - 8002
    labels:
       - traefik.enable=true
       - traefik.http.routers.advertisingserviceprivate.rule=Host(`localhost`) && PathPrefix(`/api/advertisement/private`)
       - traefik.http.routers.advertisingservicepublic.rule=Host(`localhost`) && PathPrefix(`/api/advertisement/public`)
       - traefik.http.middlewares.advertisingauth.forwardauth.address=http://localhost:80/api/user/auth
       - traefik.http.middlewares.advertisingauth.forwardauth.authResponseHeaders=X-Forwarded-User
       - traefik.http.middlewares.advertisingauth.forwardauth.trustForwardHeader=true
       - traefik.http.routers.advertisingserviceprivate.middlewares=advertisingauth
   #    - traefik.http.routers.advertisingservicepublic.tls=true
   #    - traefik.http.routers.advertisingservicepublic.tls.certresolver=myresolver
   #   - traefik.http.routers.advertisingserviceprivate.tls=true
   #    - traefik.http.routers.advertisingserviceprivate.tls.certresolver=myresolver
       
  advertisingdb:
    container_name: advertising_db
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
       - ACCEPT_EULA=Y
       - SA_PASSWORD=password@12345
    networks:
       - mynetwork
    ports:
       - 8001:1433    # Only needed for debugging, remove later
 
  identityservice:
    container_name: identity_service
    build:
        context: .
        dockerfile: IdentityService/Dockerfile
    networks: 
        - mynetwork
    environment:
       - DB_HOST=identitydb
       - DB_NAME=identity
       - DB_SA_PASSWORD=password@12345
    labels: 
       - traefik.enable=true
       - traefik.http.routers.identityservice.rule=Host(`localhost`) && PathPrefix(`/api/user`)
   #    - traefik.http.routers.identityservice.tls=true
   #    - traefik.http.routers.identityservice.tls.certresolver=myresolver

  identitydb:
    container_name: identity_db
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
       - ACCEPT_EULA=Y
       - SA_PASSWORD=password@12345
    networks:
       - mynetwork
    ports:
       - 8002:1433

  clientapp:
    container_name: client_app
    build: 
        context: ./StudentHousing.ClientApp
        dockerfile: Dockerfile 
    networks:
       - mynetwork
    stdin_open: true
    tty: true
    labels:
       - traefik.enable=true
  #     - traefik.http.routers.clientapp.entrypoints=websecure
       - traefik.http.routers.clientapp.rule=Host(`localhost`)
  #     - traefik.http.routers.clientapp.tls=true
  #     - traefik.http.routers.clientapp.tls.certresolver=myresolver

  messagingservice:
    container_name: messaging_service
    image: ${DOCKER_REGISTRY-}messagingservice
    build:
      context: .
      dockerfile: MessagingService/Dockerfile
    networks:
       - mynetwork
    labels: 
     - traefik.enable=true
     - traefik.http.routers.messagingservice.rule=Host(`localhost`) && PathPrefix(`/hubs`)

