version: '3.4'

networks:
  mynetwork:

services:
  traefik:
    container_name: traefik
    # The official v2 Traefik docker image
    image: traefik:v2.9
    networks:      
       - mynetwork
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      - "--log.level=DEBUG"
      - "--api.insecure=true"   
      - "--providers.docker"
      - "--serversTransport.insecureSkipVerify=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      # The HTTP port
      - "80:80"
      # The HTTPS port
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      

  advertisingservice.webapi:
    container_name: advertising_service
    image: ${DOCKER_REGISTRY-}adsvertisingservicewebapi
    build:
      context: .
      dockerfile: AdvertisingService/AdvertisingService.WebAPI/Dockerfile
    networks:
       - mynetwork
    environment:
       - DB_HOST=advertisingdb
       - DB_NAME=advertising
       - DB_SA_PASSWORD=password@12345
    ports:
       - 9001:80
    labels:
       - traefik.enable=true
       - traefik.http.routers.advertisingserviceprivate.rule=Host(`localhost`) && PathPrefix(`/api/advertisement/private`)
       - traefik.http.routers.advertisingservicepublic.rule=Host(`localhost`) && PathPrefix(`/api/advertisement/public`)
       - traefik.http.middlewares.advertisingauth.forwardauth.address=http://localhost:80/api/user/auth
   #    - traefik.http.middlewares.advertisingauth.forwardauth.authResponseHeaders=X-Forwarded-User
   #    - traefik.http.middlewares.advertisingauth.forwardauth.trustForwardHeader=true
       - traefik.http.routers.advertisingserviceprivate.middlewares=advertisingauth
    depends_on:
      advertisingdb:
        condition: service_healthy
       
  advertisingdb:
    container_name: advertising_db
    image: mcr.microsoft.com/mssql/server:2022-latest
    volumes:
       - ./volumes/advertising_data:/var/opt/mssql/data
    environment:
       - ACCEPT_EULA=Y
       - SA_PASSWORD=password@12345
    networks:
       - mynetwork
    ports:
       - 8001:1433    # Only needed for dev, remove in prod
    healthcheck:
       test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$${SA_PASSWORD}" -Q "SELECT 1" -b -o /dev/null
       interval: 10s
       timeout: 3s
       retries: 10
       start_period: 10s
 
  identityservice:
    container_name: identity_service
    build:
        context: .
        dockerfile: IdentityService/Dockerfile
    networks: 
        - mynetwork
    ports:
        - 9002:80  # Only needed for dev, remove in prod
    environment:
       - DB_HOST=identitydb
       - DB_NAME=identity
       - DB_SA_PASSWORD=password@12345
    labels: 
       - traefik.enable=true
       - traefik.http.routers.identityservice.rule=Host(`localhost`) && PathPrefix(`/api/user`)
    depends_on:
      identitydb:
        condition: service_healthy

  identitydb:
    container_name: identity_db
    image: mcr.microsoft.com/mssql/server:2022-latest
    volumes:
       - ./volumes/identity_data:/var/opt/mssql/data
    environment:
       - ACCEPT_EULA=Y
       - SA_PASSWORD=password@12345
    networks:
       - mynetwork
    ports:
       - 8002:1433  # Only needed for dev, remove in prod
    healthcheck:
       test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$${SA_PASSWORD}" -Q "SELECT 1" -b -o /dev/null
       interval: 10s
       timeout: 3s
       retries: 10
       start_period: 10s

  clientapp:
    container_name: client_app
    build: 
        context: ./ApartmentFinder.ClientApp
        dockerfile: Dockerfile 
    networks:
       - mynetwork
    stdin_open: true
    tty: true
    labels:
       - traefik.enable=true
       - traefik.http.routers.clientapp.rule=Host(`localhost`)

  messagingservice:
    container_name: messaging_service
    image: ${DOCKER_REGISTRY-}messagingservice
    build:
      context: .
      dockerfile: MessagingService/Dockerfile
    networks:
       - mynetwork
    ports:
      - 9003:80  # Only needed for dev, remove in prod
    environment:
       - DB_HOST=messagingdb
       - DB_NAME=messaging
       - DB_SA_PASSWORD=password@12345
    labels: 
     - traefik.enable=true
     - traefik.http.routers.messagingservicewebapi.rule=Host(`localhost`) && PathPrefix(`/api/message`)
     - traefik.http.routers.messagingservicesocket.rule=Host(`localhost`) && PathPrefix(`/hubs`)
     - traefik.http.middlewares.messagingauth.forwardauth.address=http://localhost:80/api/user/auth
   #  - traefik.http.middlewares.messagingauth.forwardauth.authResponseHeaders=X-Forwarded-User
   #  - traefik.http.middlewares.messagingauth.forwardauth.trustForwardHeader=true
     - traefik.http.routers.messagingservicewebapi.middlewares=messagingauth
    depends_on:
     rabbitmq: 
       condition: service_healthy
     messagingdb: 
       condition: service_healthy

  messagingdb:
    container_name: messaging_db
    image: mcr.microsoft.com/mssql/server:2022-latest
    volumes:
       - ./volumes/messaging_data:/var/opt/mssql/data
    environment:
       - ACCEPT_EULA=Y
       - SA_PASSWORD=password@12345
    networks:
       - mynetwork
    ports:
       - 8003:1433  # Only needed for dev, remove in prod
    healthcheck:
       test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$${SA_PASSWORD}" -Q "SELECT 1" -b -o /dev/null
       interval: 10s
       timeout: 3s
       retries: 10
       start_period: 10s

  emailnotificationservice:
    container_name: email_notification_service
    image: ${DOCKER_REGISTRY-}emailnotificationservice
    build:
      context: .
      dockerfile: EmailNotificationService/Dockerfile
    networks:
      - mynetwork
    depends_on:
      rabbitmq: 
       condition: service_healthy
      messagingservice: 
       condition: service_started

  rabbitmq:
    container_name: rabbit_mq
    image: rabbitmq:3-management
    environment: 
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - mynetwork
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 3
    


